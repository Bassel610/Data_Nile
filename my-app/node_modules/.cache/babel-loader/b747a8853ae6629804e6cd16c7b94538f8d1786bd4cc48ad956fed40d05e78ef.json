{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Basel\\\\AppData\\\\Data_Nile\\\\my-app\\\\src\\\\Componant\\\\Dashboard\\\\ResetPassowrd\\\\ResetPassowrd.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./ResetPassword.css\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ResetPassword() {\n  _s();\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const showAlert = (text, icon) => {\n    Swal.fire({\n      text,\n      icon\n    });\n  };\n  const handleResetPassword = event => {\n    event.preventDefault();\n    if (!newPassword.trim() || !confirmPassword.trim()) {\n      showAlert(\"Password fields cannot be empty\", \"error\");\n      return;\n    }\n    if (newPassword !== confirmPassword) {\n      showAlert(\"Passwords do not match! Please try again.\", \"error\");\n      return;\n    }\n    axios.post(\"https://api.data-nile.com/password\", {\n      password: newPassword\n    }).then(() => showAlert(\"Password reset successfully!\", \"success\")).catch(error => console.error(\"Error updating password:\", error));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"password-reset-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Enter new password\",\n          value: newPassword,\n          onChange: e => setNewPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Confirm new password\",\n          value: confirmPassword,\n          onChange: e => setConfirmPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleResetPassword,\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(ResetPassword, \"7t7qLBoBHt3jW+hLc45Mtb6UjMA=\");\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["useState","axios","Swal","jsxDEV","_jsxDEV","Fragment","_Fragment","ResetPassword","_s","newPassword","setNewPassword","confirmPassword","setConfirmPassword","showAlert","text","icon","fire","handleResetPassword","event","preventDefault","trim","post","password","then","catch","error","console","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Basel/AppData/Data_Nile/my-app/src/Componant/Dashboard/ResetPassowrd/ResetPassowrd.js"],"sourcesContent":["import {  useState } from \"react\";\r\nimport \"./ResetPassword.css\";\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nfunction ResetPassword() {\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n    const showAlert = (text, icon) => {\r\n        Swal.fire({ text, icon });\r\n    };\r\n\r\n    const handleResetPassword = (event) => {\r\n        event.preventDefault();\r\n        if (!newPassword.trim() || !confirmPassword.trim()) {\r\n            showAlert(\"Password fields cannot be empty\", \"error\");\r\n            return;\r\n        }\r\n\r\n        if (newPassword !== confirmPassword) {\r\n            showAlert(\"Passwords do not match! Please try again.\", \"error\");\r\n            return;\r\n        }\r\n\r\n        axios\r\n            .post(\"https://api.data-nile.com/password\", { password: newPassword })\r\n            .then(() => showAlert(\"Password reset successfully!\", \"success\"))\r\n            .catch((error) => console.error(\"Error updating password:\", error));\r\n    };\r\n    return (\r\n        <>\r\n            <div>\r\n                <div className=\"password-reset-form\">\r\n                    <h2>Reset Password</h2>\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Enter new password\"\r\n                        value={newPassword}\r\n                        onChange={(e) => setNewPassword(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Confirm new password\"\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    />\r\n                    <button  onClick={handleResetPassword}>\r\n                        Reset Password\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ResetPassword;\r\n"],"mappings":";;AAAA,SAAUA,QAAQ,QAAQ,OAAO;AACjC,OAAO,qBAAqB;AAC5B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE/B,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMa,SAAS,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;IAC9Bb,IAAI,CAACc,IAAI,CAAC;MAAEF,IAAI;MAAEC;IAAK,CAAC,CAAC;EAC7B,CAAC;EAED,MAAME,mBAAmB,GAAIC,KAAK,IAAK;IACnCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,IAAI,CAACV,WAAW,CAACW,IAAI,CAAC,CAAC,IAAI,CAACT,eAAe,CAACS,IAAI,CAAC,CAAC,EAAE;MAChDP,SAAS,CAAC,iCAAiC,EAAE,OAAO,CAAC;MACrD;IACJ;IAEA,IAAIJ,WAAW,KAAKE,eAAe,EAAE;MACjCE,SAAS,CAAC,2CAA2C,EAAE,OAAO,CAAC;MAC/D;IACJ;IAEAZ,KAAK,CACAoB,IAAI,CAAC,oCAAoC,EAAE;MAAEC,QAAQ,EAAEb;IAAY,CAAC,CAAC,CACrEc,IAAI,CAAC,MAAMV,SAAS,CAAC,8BAA8B,EAAE,SAAS,CAAC,CAAC,CAChEW,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC,CAAC;EAC3E,CAAC;EACD,oBACIrB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,eACIvB,OAAA;MAAAuB,QAAA,eACIvB,OAAA;QAAKwB,SAAS,EAAC,qBAAqB;QAAAD,QAAA,gBAChCvB,OAAA;UAAAuB,QAAA,EAAI;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvB5B,OAAA;UACI6B,IAAI,EAAC,UAAU;UACfC,WAAW,EAAC,oBAAoB;UAChCC,KAAK,EAAE1B,WAAY;UACnB2B,QAAQ,EAAGC,CAAC,IAAK3B,cAAc,CAAC2B,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnD,CAAC,eACF5B,OAAA;UACI6B,IAAI,EAAC,UAAU;UACfC,WAAW,EAAC,sBAAsB;UAClCC,KAAK,EAAExB,eAAgB;UACvByB,QAAQ,EAAGC,CAAC,IAAKzB,kBAAkB,CAACyB,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CAAC,eACF5B,OAAA;UAASmC,OAAO,EAAEtB,mBAAoB;UAAAU,QAAA,EAAC;QAEvC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC,gBACR,CAAC;AAEX;AAACxB,EAAA,CAjDQD,aAAa;AAAAiC,EAAA,GAAbjC,aAAa;AAmDtB,eAAeA,aAAa;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}